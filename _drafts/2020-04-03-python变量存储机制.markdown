---
layout:     post
title:      "Python变量存储机制"
subtitle:   "\"可变变量与不可变变量\""
date:       2020-04-3 20:00:00
author:     "Weitu"
header-img: "img/for-blog/null_value.jpg"
catalog: true
tags:
    - Python

---

> 空值，在数据科学当中非常常见，空值在不同的语言环境下、不同的数据类型，空值的表现形式各异，因此空值检验的方法也各有不同。写这篇文章缘起在工作当中，需要对开发的一批变量进行数据校验。有一些变量的默认返回为NA，我在EXCEL中设计测试案例时，填入NA，但是读入python之后，单元格内容变为空，导致测试结果误报。

## 一、什么是空值

在我们的工作中，我们可以接触到各种各样空值的表示方法：
- 字符型 ""

- 数字型 None\np.nan\np.NaN\np.NAN
> np.nan, represent of Not a Number, np.NaN and np.NAN are equivalent definitions of np.nan

- 时间类型 Nat， Not a Time


## 二、空值检验(使用Python)
> 我们这里只讨论单个变量的空值检验，Python中，Pandas对象有针对整个对象的所有cell的空值检验函数，.isnull(), .isnull().any(), .isnull().all()

1. 字符串的空值检验

```
string1 = ""
string2 = " "

print(string1 == "") # True
print(string2 == "") # False

```

2. 数字的空值检验

- isnan Test element-wise for NaN and return result as a boolean array


3. 时间的空值检验
- isnat Test element-wise for NaT (not a time) and return result as a boolean array

```
import numpy as np
print(np.isnan(np.nan))               # True
print(np.isnat(np.datetime64("NaT"))) # True
print(np.isnan(np.datetime64("NaT"))) # raise TypeError
```

## 三、空值处理(使用Python)

1. 单元素，直接赋值
2. python对象，如pandas，适用fillna、replace、dropna等函数
3. fillna函数可以使用前向填充、后项填充、均值填充等

## 四、总结

在空值方面，需要了解：
1. 空值的类型：字符型、数字型、时间型， 不同类型的空值，适用不同的空值检验函数
2. 单元素的空值检验，一般用numpy的函数、==、is等
3. pandas对象或python其他对象中的空值检验，一般各自类库里面都有对应函数，如pandas的pd.isnull()、pd.notnull()


## 番外
> == vs is 在python中的区别

1. python的对象包含三个要素：id-标识身份、type-数据类型、value-数据值
2. == vs is 异同

| 相同 |  差异 | 例举 |
| ------ | ------ | ------ |
|都是对对象进行比较判断作用的|对象比较判断的内容并不相同<br/>==是python标准操作符中的比较操作符，用来比较判断两个对象的value是否一致<br/> is也叫同一性运算符，用于判断对象的id是否相同<br/>is的相同的标准是更严苛的|x=y=[1, 1]<br/>z=[1, 1]<br/>print(x==y)<br/>print(x==z)<br/>print(x is y)<br/>print(x is z)<br/>x1=1<br/>x2=1<br/>print(x1 is x2)|

上面的例句中，x is z 为True， 而x1 is x2 为False，这是什么原因呢？
> 在python中，对于不可变数据类型（如int、float、string）和可变数据类型(如list、dict)的存储机制是不一样的， 参考[这篇文章](https://blog.csdn.net/Com_ma/article/details/82156912)

综上，在工作中，如果我们仅仅比较值是否相同，推荐使用"=="，以防止不必要的bug

[NumPy 中文](https://www.numpy.org.cn/)